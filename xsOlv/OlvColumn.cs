/* Object List View
 * Copyright (C) 2006-2012 Phillip Piper
 * Refactored by Jason James Newland - 2014
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * If you wish to use this code in a closed source application, please contact phillip_piper@bigfoot.com.
 */
using System;
using System.ComponentModel;
using System.Windows.Forms;
using System.Drawing;
using System.Collections;
using libolv.Filtering;
using libolv.Filtering.Filters;
using libolv.Implementation;
using libolv.Implementation.Munger;
using libolv.Rendering.Renderers;
using libolv.Rendering.Styles;

namespace libolv
{
    [Browsable(false)]
    public class OlvColumn : ColumnHeader
    {
        private string _aspectName;
        private AspectPutterDelegate _aspectPutter;
        private AutoCompleteMode _autoCompleteEditorMode = AutoCompleteMode.Append;
        private bool _checkBoxes;
        private IClusteringStrategy _clusteringStrategy;
        private int _freeSpaceProportion;
        private bool _groupable = true;
        private GroupKeyGetterDelegate _groupKeyGetter;
        private GroupKeyToTitleConverterDelegate _groupKeyToTitleConverter;
        private string _cachedGroupWithItemCountFormat;
        private string _cachedGroupWithItemCountSingularFormat;
        private HorizontalAlignment? _headerTextAlign;
        private bool _hideable = true;
        private bool _isEditable = true;
        private bool _isVisible = true;
        private int _lastDisplayIndex = -1;        
        private int _maxWidth = -1;
        private int _minWidth = -1;
        private bool _searchable = true;
        private bool _showTextInHeader = true;
        private bool _sortable = true;
        private HorizontalAlignment? _textAlign;
        private bool _triStateCheckBoxes;
        private bool _useFiltering = true;
        private IModelFilter _valueBasedFilter;
        private IList _valuesChosenForFiltering = new ArrayList();
        private bool _wordWrap;
        private Munger _aspectMunger;
        private Munger _imageAspectMunger;
        private Type _dataType;

        public OlvColumn()
        {
            /* Empty */
        }

        public OlvColumn(string title, string aspect) : this()
        {
            Text = title;
            AspectName = aspect;
        }

        /* Public Properties */
        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public AspectGetterDelegate AspectGetter { get; set; }

        [Obsolete("This property is no longer maintained", true), Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public bool AspectGetterAutoGenerated { get; set; }

        [Category("ObjectListView"), Description("The name of the property or method that should be called to get the aspect to display in this column"), DefaultValue(null)]
        public string AspectName
        {
            get { return _aspectName; }
            set
            {
                _aspectName = value;
                _aspectMunger = null;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public AspectPutterDelegate AspectPutter
        {
            get { return _aspectPutter; }
            set { _aspectPutter = value; }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public AspectToStringConverterDelegate AspectToStringConverter { get; set; }

        [Category("ObjectListView"), Description("The format string that will be used to convert an aspect to its string representation"), DefaultValue(null)]
        public string AspectToStringFormat { get; set; }

        [Category("ObjectListView"), Description("Should the editor for cells of this column use AutoComplete"), DefaultValue(true)]
        public bool AutoCompleteEditor
        {
            get { return AutoCompleteEditorMode != AutoCompleteMode.None; }
            set
            {
                if (value)
                {
                    if (AutoCompleteEditorMode == AutoCompleteMode.None)
                    {
                        AutoCompleteEditorMode = AutoCompleteMode.Append;
                    }
                }
                else
                {
                    AutoCompleteEditorMode = AutoCompleteMode.None;
                }
            }
        }

        [Category("ObjectListView"), Description("Should the editor for cells of this column use AutoComplete"), DefaultValue(AutoCompleteMode.Append)]
        public AutoCompleteMode AutoCompleteEditorMode
        {
            get { return _autoCompleteEditorMode; }
            set { _autoCompleteEditorMode = value; }
        }
       
        [Browsable(false)]
        public bool CanBeHidden
        {
            get { return Hideable && (Index != 0); }
        }

        public Rectangle? CellPadding { get; set; }

        [Category("ObjectListView"), Description("How will cell values be vertically aligned?"), DefaultValue(null)]
        public virtual StringAlignment? CellVerticalAlignment { get; set; }

        [Category("ObjectListView"), Description("Should values in this column be treated as a checkbox, rather than a string?"), DefaultValue(false)]
        public virtual bool CheckBoxes
        {
            get { return _checkBoxes; }
            set
            {
                if (_checkBoxes == value)
                {
                    return;
                }
                _checkBoxes = value;
                if (_checkBoxes)
                {
                    if (Renderer == null)
                    {
                        Renderer = new CheckStateRenderer();
                    }
                }
                else
                {
                    if (Renderer is CheckStateRenderer)
                    {
                        Renderer = null;
                    }
                }
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IClusteringStrategy ClusteringStrategy
        {
            get
            {
                if (_clusteringStrategy == null)
                {
                    ClusteringStrategy = DecideDefaultClusteringStrategy();
                }
                return _clusteringStrategy;
            }
            set
            {
                _clusteringStrategy = value;
                if (_clusteringStrategy != null)
                {
                    _clusteringStrategy.Column = this;
                }
            }
        }

        [Category("ObjectListView"), Description("Will this column resize to fill unoccupied horizontal space in the listview?"), DefaultValue(false)]
        public bool FillsFreeSpace
        {
            get { return FreeSpaceProportion > 0; }
            set { _freeSpaceProportion = value ? 1 : 0; }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int FreeSpaceProportion
        {
            get { return _freeSpaceProportion; }
            set { _freeSpaceProportion = Math.Max(0, value); }
        }

        [Category("ObjectListView"), Description("Will the list create groups when this header is clicked?"), DefaultValue(true)]
        public bool Groupable
        {
            get { return _groupable; }
            set { _groupable = value; }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GroupFormatterDelegate GroupFormatter { get; set; }

        [Browsable(false),
         DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GroupKeyGetterDelegate GroupKeyGetter
        {
            get { return _groupKeyGetter; }
            set { _groupKeyGetter = value; }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public GroupKeyToTitleConverterDelegate GroupKeyToTitleConverter
        {
            get { return _groupKeyToTitleConverter; }
            set { _groupKeyToTitleConverter = value; }
        }

        [Category("ObjectListView"), Description("The format to use when suffixing item counts to group titles"), DefaultValue(null), Localizable(true)]
        public string GroupWithItemCountFormat { get; set; }

        [Browsable(false)]
        public string GroupWithItemCountFormatOrDefault
        {
            get
            {
                if (!string.IsNullOrEmpty(GroupWithItemCountFormat))
                {
                    return GroupWithItemCountFormat;
                }
                if (ListView != null)
                {
                    _cachedGroupWithItemCountFormat = ((ObjectListView)ListView).GroupWithItemCountFormatOrDefault;
                    return _cachedGroupWithItemCountFormat;
                }
                /* There is one rare but pathelogically possible case where the ListView can
                 * be null (if the column is grouping a ListView, but is not one of the columns
                 * for that ListView) so we have to provide a workable default for that rare case. */
                return _cachedGroupWithItemCountFormat ?? "{0} [{1} items]";
            }
        }

        [Category("ObjectListView"), Description("The format to use when suffixing item counts to group titles"), DefaultValue(null), Localizable(true)]
        public string GroupWithItemCountSingularFormat { get; set; }

        [Browsable(false)]
        public string GroupWithItemCountSingularFormatOrDefault
        {
            get
            {
                if (!string.IsNullOrEmpty(GroupWithItemCountSingularFormat))
                {
                    return GroupWithItemCountSingularFormat;
                }
                if (ListView != null)
                {
                    _cachedGroupWithItemCountSingularFormat = ((ObjectListView)ListView).GroupWithItemCountSingularFormatOrDefault;
                    return _cachedGroupWithItemCountSingularFormat;
                }
                /* There is one rare but pathelogically possible case where the ListView can
                 * be null (if the column is grouping a ListView, but is not one of the columns
                 * for that ListView) so we have to provide a workable default for that rare case. */
                return _cachedGroupWithItemCountSingularFormat ?? "{0} [{1} item]";
            }
        }

        [Browsable(false)]
        public bool HasFilterIndicator
        {
            get
            {
                return UseFiltering && ValuesChosenForFiltering != null && ValuesChosenForFiltering.Count > 0;
            }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public HeaderDrawingDelegate HeaderDrawing { get; set; }

        [Category("ObjectListView"), Description("What style will be used to draw the header of this column"), DefaultValue(null)]
        public HeaderFormatStyle HeaderFormatStyle { get; set; }

        [Browsable(false)]
        [DefaultValue(null)]
        public Font HeaderFont
        {
            get { return HeaderFormatStyle == null ? null : HeaderFormatStyle.Normal.Font; }
            set
            {
                if (value == null && HeaderFormatStyle == null)
                {
                    return;
                }
                if (HeaderFormatStyle == null)
                {
                    HeaderFormatStyle = new HeaderFormatStyle();
                }
                HeaderFormatStyle.SetFont(value);
            }
        }

        [Browsable(false)]
        [DefaultValue(typeof (Color), "")]
        public Color HeaderForeColor
        {
            get { return HeaderFormatStyle == null ? Color.Empty : HeaderFormatStyle.Normal.ForeColor; }
            set
            {
                if (value.IsEmpty && HeaderFormatStyle == null)
                {
                    return;
                }
                if (HeaderFormatStyle == null)
                {
                    HeaderFormatStyle = new HeaderFormatStyle();
                }
                HeaderFormatStyle.SetForeColor(value);
            }
        }

        [Category("ObjectListView"), Description("Name of the image that will be shown in the column header."), DefaultValue(null), TypeConverter(typeof (ImageKeyConverter)), Editor(
            "System.Windows.Forms.Design.ImageIndexEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
            , typeof (System.Drawing.Design.UITypeEditor)), RefreshProperties(RefreshProperties.Repaint)]
        public string HeaderImageKey { get; set; }

        [Category("ObjectListView"), Description("How will the header text be aligned?"), DefaultValue(HorizontalAlignment.Left)]
        public HorizontalAlignment HeaderTextAlign
        {
            get { return _headerTextAlign.HasValue ? _headerTextAlign.Value : TextAlign; }
            set { _headerTextAlign = value; }
        }

        [Browsable(false)]
        public StringAlignment HeaderTextAlignAsStringAlignment
        {
            get
            {
                switch (HeaderTextAlign)
                {
                    case HorizontalAlignment.Left:
                        return StringAlignment.Near;

                    case HorizontalAlignment.Center:
                        return StringAlignment.Center;

                    case HorizontalAlignment.Right:
                        return StringAlignment.Far;

                    default:
                        return StringAlignment.Near;
                }
            }
        }

        [Browsable(false)]
        public bool HasHeaderImage
        {
            get
            {
                return (ListView != null &&
                        ListView.SmallImageList != null &&
                        ListView.SmallImageList.Images.ContainsKey(HeaderImageKey));
            }
        }

        [Category("ObjectListView"), Description("Will the user be able to choose to hide this column?"), DefaultValue(true)]
        public bool Hideable
        {
            get { return _hideable; }
            set { _hideable = value; }
        }

        [Category("ObjectListView"), Description("Will the text values of this column act like hyperlinks?"), DefaultValue(false)]
        public bool Hyperlink { get; set; }

        [Category("ObjectListView"), Description("The name of the property that holds the image selector"), DefaultValue(null)]
        public string ImageAspectName { get; set; }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public ImageGetterDelegate ImageGetter { get; set; }

        [Category("ObjectListView"), Description("Can the value in this column be edited?"), DefaultValue(true)]
        public bool IsEditable
        {
            get { return _isEditable; }
            set { _isEditable = value; }
        }

        [Browsable(false)]
        public bool IsFixedWidth
        {
            get { return (MinimumWidth != -1 && MaximumWidth != -1 && MinimumWidth >= MaximumWidth); }
        }

        [Category("ObjectListView"), Description("Will this column be used when the view is switched to tile view"), DefaultValue(false)]
        public bool IsTileViewColumn { get; set; }

        [Category("ObjectListView"), Description("Will the header for this column be drawn vertically?"), DefaultValue(false)]
        public bool IsHeaderVertical { get; set; }
        
        [Category("ObjectListView"), Description("Can this column be seen by the user?"), DefaultValue(true)]
        public bool IsVisible
        {
            get { return _isVisible; }
            set { _isVisible = value; }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public int LastDisplayIndex
        {
            get { return _lastDisplayIndex; }
            set { _lastDisplayIndex = value; }
        }

        [Category("ObjectListView"), Description("What is the maximum width to which the user can resize this column?"), DefaultValue(-1)]
        public int MaximumWidth
        {
            get { return _maxWidth; }
            set
            {
                _maxWidth = value;
                if (_maxWidth != -1 && Width > _maxWidth)
                {
                    Width = _maxWidth;
                }
            }
        }
        
        [Category("ObjectListView"), Description("What is the minimum width to which the user can resize this column?"), DefaultValue(-1)]
        public int MinimumWidth
        {
            get { return _minWidth; }
            set
            {
                _minWidth = value;
                if (Width < _minWidth)
                {
                    Width = _minWidth;
                }
            }
        }

        [Category("ObjectListView"), Description("The renderer will draw this column when the ListView is owner drawn"), DefaultValue(null)]
        public IRenderer Renderer { get; set; }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public RenderDelegate RendererDelegate
        {
            get { return Renderer is Version1Renderer ? ((Version1Renderer)Renderer).RenderDelegate : null; }
            set { Renderer = value == null ? null : new Version1Renderer(value); }
        }

        [Category("ObjectListView"), Description("Will the text of the cells in this column be considered when searching?"), DefaultValue(true)]
        public bool Searchable
        {
            get { return _searchable; }
            set { _searchable = value; }
        }

        [Category("ObjectListView"), Description("Will the header for this column include text?"), DefaultValue(true)]
        public bool ShowTextInHeader
        {
            get { return _showTextInHeader; }
            set { _showTextInHeader = value; }
        }

        [Category("ObjectListView"), Description("Will clicking this columns header resort the list?"), DefaultValue(true)]
        public bool Sortable
        {
            get { return _sortable; }
            set { _sortable = value; }
        }        

        public new HorizontalAlignment TextAlign
        {
            get { return _textAlign.HasValue ? _textAlign.Value : base.TextAlign; }
            set
            {
                _textAlign = value;
                base.TextAlign = value;
            }
        }

        [Browsable(false)]
        public StringAlignment TextStringAlign
        {
            get
            {
                switch (TextAlign)
                {
                    case HorizontalAlignment.Center:
                        return StringAlignment.Center;
                    case HorizontalAlignment.Left:
                        return StringAlignment.Near;
                    case HorizontalAlignment.Right:
                        return StringAlignment.Far;
                    default:
                        return StringAlignment.Near;
                }
            }
        }

        [Category("ObjectListView"), Description("The tooltip to show when the mouse is hovered over the header of this column"), DefaultValue((String)null), Localizable(true)]
        public string ToolTipText { get; set; }

        [Category("ObjectListView"), Description("Should values in this column be treated as a tri-state checkbox?"), DefaultValue(false)]
        public virtual bool TriStateCheckBoxes
        {
            get { return _triStateCheckBoxes; }
            set
            {
                _triStateCheckBoxes = value;
                if (value && !CheckBoxes)
                {
                    CheckBoxes = true;
                }
            }
        }

        [Category("ObjectListView"), Description(
            "The name of the property or method that should be called to get the aspect to display in this column"), DefaultValue(false)]
        public bool UseInitialLetterForGroup { get; set; }

        [Category("ObjectListView"), Description("Does this column want to show a Filter menu item when its header is right clicked"), DefaultValue(true)]
        public bool UseFiltering
        {
            get { return _useFiltering; }
            set { _useFiltering = value; }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IModelFilter ValueBasedFilter
        {
            get
            {
                if (!UseFiltering)
                {
                    return null;
                }
                if (_valueBasedFilter != null)
                {
                    return _valueBasedFilter;
                }
                if (ClusteringStrategy == null)
                {
                    return null;
                }
                return ValuesChosenForFiltering == null || ValuesChosenForFiltering.Count == 0
                           ? null
                           : ClusteringStrategy.CreateFilter(ValuesChosenForFiltering);
            }
            set { _valueBasedFilter = value; }
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public IList ValuesChosenForFiltering
        {
            get { return _valuesChosenForFiltering; }
            set { _valuesChosenForFiltering = value; }
        }

        [Category("ObjectListView"), Description("The width in pixels of this column"), DefaultValue(60)]
        public new int Width
        {
            get { return base.Width; }
            set { base.Width = MaximumWidth != -1 && value > MaximumWidth ? MaximumWidth : Math.Max(MinimumWidth, value); }
        }

        [Category("ObjectListView"), Description("Draw this column cell's word wrapped"), DefaultValue(false)]
        public bool WordWrap
        {
            get { return _wordWrap; }
            set
            {
                _wordWrap = value;
                /* If there isn't a renderer and they are turning word wrap off, we don't need to do anything */
                if (Renderer == null && !_wordWrap)
                {
                    return;
                }
                /* All other cases require a renderer of some sort */
                if (Renderer == null)
                {
                    Renderer = new HighlightTextRenderer();
                }
                var baseRenderer = Renderer as BaseRenderer;
                /* If there is a custom renderer (not descended from BaseRenderer), 
                 * we leave it up to them to implement wrapping */
                if (baseRenderer == null)
                {
                    return;
                }
                baseRenderer.CanWrap = _wordWrap;
            }
        }

        /* Object commands */
        public string ConvertGroupKeyToTitle(object value)
        {
            return _groupKeyToTitleConverter != null
                       ? _groupKeyToTitleConverter(value)
                       : (value == null ? "{null}" : ValueToString(value));
        }

        public CheckState GetCheckState(object rowObject)
        {
            if (!CheckBoxes)
            {
                return CheckState.Unchecked;
            }
            var aspectAsBool = GetValue(rowObject) as bool?;
            return aspectAsBool.HasValue
                       ? (aspectAsBool.Value ? CheckState.Checked : CheckState.Unchecked)
                       : CheckState.Indeterminate;
        }

        public void PutCheckState(object rowObject, CheckState newState)
        {
            switch (newState)
            {
                case CheckState.Checked:
                    PutValue(rowObject, true);
                    break;

                case CheckState.Unchecked:
                    PutValue(rowObject, false);
                    break;

                default:
                    PutValue(rowObject, null);
                    break;
            }
        }

        public object GetAspectByName(object rowObject)
        {
            if (_aspectMunger == null)
            {
                _aspectMunger = new Munger(AspectName);
            }
            return _aspectMunger.GetValue(rowObject);
        }

        public object GetGroupKey(object rowObject)
        {
            if (_groupKeyGetter == null)
            {
                var key = GetValue(rowObject);
                var keyAsString = key as String;
                if (keyAsString != null && UseInitialLetterForGroup)
                {
                    if (keyAsString.Length > 0)
                    {
                        key = keyAsString.Substring(0, 1).ToUpper();
                    }
                }
                return key;
            }
            return _groupKeyGetter(rowObject);
        }
        
        public Object GetImage(object rowObject)
        {
            if (CheckBoxes)
            {
                return GetCheckStateImage(rowObject);
            }
            if (ImageGetter != null)
            {
                return ImageGetter(rowObject);
            }
            if (!string.IsNullOrEmpty(ImageAspectName))
            {
                if (_imageAspectMunger == null)
                {
                    _imageAspectMunger = new Munger(ImageAspectName);
                }
                return _imageAspectMunger.GetValue(rowObject);
            }
            /* I think this is wrong. ImageKey is meant for the image in the header, not in the rows */
            if (!string.IsNullOrEmpty(ImageKey))
            {
                return ImageKey;
            }
            return ImageIndex;
        }

        public string GetCheckStateImage(Object rowObject)
        {
            var checkState = GetCheckState(rowObject);
            switch (checkState)
            {
                case CheckState.Checked:
                    return ObjectListView.CheckedKey;

                case CheckState.Unchecked:
                    return ObjectListView.UncheckedKey;
            }
            return ObjectListView.IndeterminateKey;
        }

        public string GetStringValue(object rowObject)
        {
            return ValueToString(GetValue(rowObject));
        }

        public object GetValue(object rowObject)
        {
            return AspectGetter == null ? GetAspectByName(rowObject) : AspectGetter(rowObject);
        }

        public void PutAspectByName(Object rowObject, Object newValue)
        {
            if (_aspectMunger == null)
            {
                _aspectMunger = new Munger(AspectName);
            }
            _aspectMunger.PutValue(rowObject, newValue);
        }

        public void PutValue(Object rowObject, Object newValue)
        {
            if (_aspectPutter == null)
            {
                PutAspectByName(rowObject, newValue);
            }
            else
            {
                _aspectPutter(rowObject, newValue);
            }
        }

        public string ValueToString(object value)
        {
            /* Give the installed converter a chance to work (even if the value is null) */
            if (AspectToStringConverter != null)
            {
                return AspectToStringConverter(value) ?? string.Empty;
            }
            /* Without a converter, nulls become simple empty strings */
            if (value == null)
            {
                return string.Empty;
            }
            var fmt = AspectToStringFormat;
            return string.IsNullOrEmpty(fmt) ? value.ToString() : string.Format(fmt, value);
        }

        /* Utilities */
        private IClusteringStrategy DecideDefaultClusteringStrategy()
        {
            return !UseFiltering
                       ? null
                       : (DataType == typeof (DateTime)
                              ? (IClusteringStrategy)new DateTimeClusteringStrategy()
                              : new ClustersFromGroupsStrategy());
        }

        [Browsable(false), DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public Type DataType
        {
            get
            {
                if (_dataType == null)
                {
                    var olv = ListView as ObjectListView;
                    if (olv != null)
                    {
                        var value = olv.GetFirstNonNullValue(this);
                        if (value != null)
                        {
                            return value.GetType(); /* THINK: Should we cache this? */
                        }
                    }
                }
                return _dataType;
            }
            set { _dataType = value; }
        }

        public void MakeGroupies(object[] values, string[] descriptions)
        {
            MakeGroupies(values, descriptions, null, null, null);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions)
        {
            MakeGroupies(values, descriptions, null, null, null);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions, object[] images)
        {
            MakeGroupies(values, descriptions, images, null, null);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions, object[] images, string[] subtitles)
        {
            MakeGroupies(values, descriptions, images, subtitles, null);
        }

        public void MakeGroupies<T>(T[] values, string[] descriptions, object[] images, string[] subtitles, string[] tasks)
        {
            /* Sanity checks */
            if (values == null)
            {
                throw new ArgumentNullException("values");
            }
            if (descriptions == null)
            {
                throw new ArgumentNullException("descriptions");
            }
            if (values.Length + 1 != descriptions.Length)
            {
                throw new ArgumentException("descriptions must have one more element than values.");
            }
            /* Install a delegate that returns the index of the description to be shown */
            GroupKeyGetter = delegate(object row)
                                 {
                                     var aspect = GetValue(row);
                                     if (aspect == null || aspect == DBNull.Value)
                                     {
                                         return -1;
                                     }
                                     var comparable = (IComparable)aspect;
                                     for (var i = 0; i < values.Length; i++)
                                     {
                                         if (comparable.CompareTo(values[i]) < 0)
                                         {
                                             return i;
                                         }
                                     }
                                     /* Display the last element in the array */
                                     return descriptions.Length - 1;
                                 };
            /* Install a delegate that simply looks up the given index in the descriptions. */
            var desc = descriptions;
            GroupKeyToTitleConverter = key => (int)key < 0 ? "" : desc[(int)key];
            /* Install one delegate that does all the other formatting */
            GroupFormatter = delegate(OlvGroup group, GroupingParameters parms)
                                 {
                                     var key = (int)group.Key;
                                     /* we know this is an int since we created it in GroupKeyGetter */
                                     if (key < 0)
                                     {
                                         return;
                                     }
                                     if (images != null && key < images.Length)
                                     {
                                         @group.TitleImage = images[key];
                                     }
                                     if (subtitles != null && key < subtitles.Length)
                                     {
                                         @group.Subtitle = subtitles[key];
                                     }
                                     if (tasks != null && key < tasks.Length)
                                     {
                                         @group.Task = tasks[key];
                                     }
                                 };
        }

        public void MakeEqualGroupies<T>(T[] values, string[] descriptions, object[] images, string[] subtitles, string[] tasks)
        {
            /* Sanity checks */
            if (values == null)
            {
                throw new ArgumentNullException("values");
            }
            if (descriptions == null)
            {
                throw new ArgumentNullException("descriptions");
            }
            if (values.Length != descriptions.Length)
            {
                throw new ArgumentException("descriptions must have the same number of elements as values.");
            }
            var valuesArray = new ArrayList(values);
            /* Install a delegate that returns the index of the description to be shown */
            GroupKeyGetter = row => valuesArray.IndexOf(GetValue(row));
            /* Install a delegate that simply looks up the given index in the descriptions. */
            GroupKeyToTitleConverter = delegate(object key)
                                           {
                                               var intKey = (int)key;
                                               /* we know this is an int since we created it in GroupKeyGetter */
                                               return (intKey < 0) ? "[other]" : descriptions[intKey];
                                           };
            /* Install one delegate that does all the other formatting */
            GroupFormatter = delegate(OlvGroup group, GroupingParameters parms)
                                 {
                                     var key = (int)group.Key;
                                     /* we know this is an int since we created it in GroupKeyGetter */
                                     if (key < 0)
                                     {
                                         return;
                                     }
                                     if (images != null && key < images.Length)
                                     {
                                         @group.TitleImage = images[key];
                                     }
                                     if (subtitles != null && key < subtitles.Length)
                                     {
                                         @group.Subtitle = subtitles[key];
                                     }
                                     if (tasks != null && key < tasks.Length)
                                     {
                                         @group.Task = tasks[key];
                                     }
                                 };
        }
    }
}
